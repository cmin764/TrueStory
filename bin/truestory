#! /usr/bin/env python3


import argparse
import json
import logging
from datetime import date, datetime

import addict

import truestory
from truestory import auth, datautil
from truestory.crawlers import RssCrawler
from truestory.models import (
    ArticleModel,
    NAMESPACE as DATASTORE_NAMESPACE,
    RssTargetModel,
)


RSS_TARGETS_PATH = "data/rss_targets.json"


def _json_serializer(obj):
    """JSON serializer for objects not serializable by default `json` module."""
    if isinstance(obj, (datetime, date)):
        return obj.isoformat()


def crawl_articles(args):
    """Crawls and possibly saves articles into DB."""
    rss_targets = RssTargetModel.all()
    rss_crawler = RssCrawler(rss_targets, limit=args.limit)
    articles_dict = rss_crawler.crawl_targets()
    articles = sum(articles_dict.values(), [])
    for article in articles:
        print(json.dumps(article.to_dict(), indent=4, default=_json_serializer))
    if args.save:
        logging.info("Saving these %d shown article(s).", len(articles))
        ArticleModel.put_multi(articles)


def compute_token(args):
    """Returns a 128bit token string used for authorization."""
    token = auth.compute_token(args.mail)
    print(f"Token: {token}")
    status = auth.authorize_with_token(token)
    print(f"Authorized: {status}")


def update_rss_targets(args):
    """Updates into the database the loaded list of RSS targets."""
    targets = json.load(args.targets_stream)
    for target in targets:
        target = addict.Dict(target)
        old_rss_targets = RssTargetModel.all(
            RssTargetModel.query(("link", "=", target.link)), order=False
        )
        if old_rss_targets:
            assert len(old_rss_targets) == 1, (
                "duplicate RSS targets found in the database"
            )
            old_rss_target = old_rss_targets[0]
            if not args.all:
                logging.debug(
                    "Skipping already existing target %r.", old_rss_target.source_name
                )
                continue

            logging.warning(
                "Removing old target %r from the DB.", old_rss_target.source_name
            )
            old_rss_target.remove()

        rss_target = RssTargetModel(
            source_name=target.source_name,
            link=target.link,
            enabled=target.enabled if target.enabled is not None else True
        )
        logging.info("Adding new target into the DB: %s", rss_target.source_name)
        rss_target.put()


def main():
    # Main parser with common flags.
    parser = argparse.ArgumentParser(description="Be your own journalist.")
    parser.add_argument(
        "-v", "--verbose", action="store_true",
        help="show debugging messages"
    )
    subparser = parser.add_subparsers(dest="command", title="commands", required=True)

    # Articles crawling & saving.
    crawl_parser = subparser.add_parser("crawl", help="crawl articles")
    crawl_parser.add_argument(
        "-l", "--limit", metavar="NUMBER", type=int,
        help="how many results to return for each source"
    )
    crawl_parser.add_argument(
        "-s", "--save", action="store_true",
        help=f"save results into Datastore ({DATASTORE_NAMESPACE})"
    )
    crawl_parser.set_defaults(function=crawl_articles)

    # RSS targets management.
    rss_parser = subparser.add_parser("rss", help="manage RSS targets")
    rss_subparser = rss_parser.add_subparsers(
        dest="command", title="commands", required=True
    )
    update_parser = rss_subparser.add_parser(
        "update", help="load a list of RSS targets into the database"
    )
    update_parser.add_argument(
        "-a", "--all", action="store_true",
        help="replace existing targets too (instead of just adding the new ones only)"
    )
    update_parser.add_argument(
        "targets_stream", metavar="TARGETS_FILE", type=argparse.FileType("r"),
        default=datautil.get_stream(RSS_TARGETS_PATH), nargs="?",
        help=f"JSON file containing a list of RSS targets ({RSS_TARGETS_PATH})"
    )
    update_parser.set_defaults(function=update_rss_targets)

    # Token generation (by e-mail) and check.
    token_parser = subparser.add_parser("token", help="compute token")
    token_parser.add_argument(
        "mail", metavar="E-MAIL",
        help="e-mail address for which you want to provide access"
    )
    token_parser.set_defaults(function=compute_token)

    args = parser.parse_args()
    level = logging.DEBUG if args.verbose else logging.INFO
    logging.root.handlers.clear()
    logging.basicConfig(
        format="%(levelname)s - %(name)s - %(asctime)s - %(message)s",
        filename=truestory.LOGFILE,
        level=level
    )

    try:
        args.function(args)
    except Exception as exc:
        logging.exception(exc)
    else:
        logging.info("Operation completed successfully.")


if __name__ == "__main__":
    main()
